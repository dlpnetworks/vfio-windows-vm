#!/bin/bash
set -e


#################
# Configuration #
#################

#VM_DOMAIN="local"
VM_DOMAIN="dlp-us-sv-win1"

#
# List of devices that need to be passed through to the VM
#
# 01:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1070] (rev a1)
# 01:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)
# 00:1f.3 Audio device: Intel Corporation 200 Series PCH HD Audio
#
PCI_DEVICEIDS="0000:01:00.0 0000:01:00.1 0000:00:1f.3"

# Blacklised services and modules are stopped before devices are passed through and restarted
# after the VM is stopped
BLACKLISTED_SERVICES="bumblebeed"
BLACKLISTED_MODULES="nouveau"
#BLACKLISTED_MODULES="nvidia_modeset nvidia"

# Ensured services and modules are started before devices are passed through, but are not
# stopped after devices are reattached
ENSURE_SERVICES="libvirtd"
ENSURE_MODULES="virtio virtio-net virtio-blk virtio-balloon virtio-ring nft_masq_ipv4 nft_masq_ipv6 nft_chain_nat_ipv6 nft_chain_nat_ipv4"

# Start services and modules are started before devices are passed through and stopped after
# devices are reattached
START_SERVICES="nmb smb"
START_MODULES="virtio-pci"


################
# DO NOT TOUCH #
################

# Check root access
if [[ $EUID -ne 0 ]]; then
    echo "this script must be run as the super-user"
    exit 1
fi

case "$1" in
    "")
        ;&

    start)
        echo "[INFO] Verifying Configuration"

        if [[ ! $(virsh domstate ${VM_DOMAIN}) =~ "shut off" ]]; then
            echo "[ERROR] The virtual machine ${VM_DOMAIN} is already started"
            exit 1
        fi

        echo "[INFO] Rescanning PCI devices in case prior run failed"
        echo 1 > /sys/bus/pci/rescan
        sleep 0.5

        echo "[INFO] Verifying that devices exist"
        for i in ${PCI_DEVICEIDS}; do
            if [[ ! -e "/sys/bus/pci/devices/${dev}" ]]; then
                echo "[ERROR] Device ${dev} was not found"
                echo "[ERROR] /sys/bus/pci/devices/${dev} was not found"
                exit 1
            fi
        done

        echo "[INFO] Verifying that kernel modules exist"
        for i in ${ENSURE_MODULES} ${START_MODULES}; do
            modprobe -n ${i}
        done

        echo "[INFO] Configuration Verified"
        ;&

    prep-services)
        echo "[INFO] Preparing services and drivers"

        for i in ${BLACKLISTED_SERVICES}; do
            echo "[INFO] -> Stopping service ${i}"
            systemctl is-active --quiet ${i} && systemctl stop ${i}
        done

        for i in ${BLACKLISTED_MODULES}; do
            echo "[INFO] -> Unloading kernel module ${i}"
            ! modprobe -r ${i} 2>/dev/null
        done
        
        for i in ${ENSURE_SERVICES} ${START_SERVICES}; do
            echo "[INFO] -> Starting service ${i}"
            systemctl start ${i}
        done

        for i in ${ENSURE_MODULES} ${START_MODULES}; do
            echo "[INFO] -> Loading kernel module ${i}"
            modprobe ${i}
        done

        sleep 0.25
        ;&

    passthrough-devices)
        echo "[INFO] Passing through PCI devices"

        # Trying to unbind the GPU results in general protection faults.
        # Removing the binding ID from vfio-pci and then resetting the PCI device seems
        # to work properly. It also auto-retaches to the nvidia module this way.
        for dev in ${PCI_DEVICEIDS}
        do
            if [[ ! -e "/sys/bus/pci/drivers/vfio-pci/${dev}" ]]; then
                vendor=$(cat /sys/bus/pci/devices/${dev}/vendor)
                device=$(cat /sys/bus/pci/devices/${dev}/device)
                echo "[INFO] -> Passing through device ${dev} (${vendor} ${device})"

                echo "[INFO] ----> Issuing PCI hotplug remove command"
                echo 1 > /sys/bus/pci/devices/${dev}/remove
                while [[ -e "/sys/bus/pci/devices/${dev}" ]]; do sleep 0.1; done

                echo "[INFO] ----> Rescan PCI bus to rediscover device"
                echo 1 > /sys/bus/pci/rescan
                while [[ ! -e "/sys/bus/pci/devices/${dev}" ]]; do sleep 0.1; done
                
                echo "[INFO] ----> Adding device to vfio-pci id list"
                echo ${vendor} ${device} > /sys/bus/pci/drivers/vfio-pci/new_id
                sleep 2

                echo "[INFO] ----> Verifying device is attached to vfio-pci stub driver"
                if [[ ! -e "/sys/bus/pci/drivers/vfio-pci/${dev}" ]]; then
                    echo "[ERROR] ----> DEVICE IS NOT ATTACHED TO VFIO-PCI"
                    exit 1
                fi
            else
                echo "[INFO] -> Device ${dev} is already attached to vfio-pci"
            fi
        done
        ;&

    start-vm)
        echo "[INFO] Starting virtual machine (${VM_DOMAIN})"
        virsh start ${VM_DOMAIN}
        sleep 30
        ;&

    wait-vm)
        echo "[INFO] Waiting for virtual machine to exit"
        while true; do
            sleep 15
            [[ $(virsh domstate ${VM_DOMAIN}) =~ "shut off" ]] && break
        done
        ;&

    restore-devices)
        for dev in ${PCI_DEVICEIDS}
        do
            if [[ -e "/sys/bus/pci/drivers/vfio-pci/${dev}" ]]; then
                vendor=$(cat /sys/bus/pci/devices/${dev}/vendor)
                device=$(cat /sys/bus/pci/devices/${dev}/device)
                echo "[INFO] -> Returning device ${dev} to host (${vendor} ${device})"
                
                echo "[INFO] ----> Removing device from vfio-pci id list"
                ! echo ${vendor} ${device} > /sys/bus/pci/drivers/vfio-pci/remove_id
                sleep 2

                echo "[INFO] ----> Issuing PCI hotplug remove command"
                echo 1 > /sys/bus/pci/devices/${dev}/remove
                while [[ -e "/sys/bus/pci/devices/${dev}" ]]; do sleep 0.1; done
                
                echo "[INFO] ----> Rescan PCI bus to rediscover device"
                echo 1 > /sys/bus/pci/rescan
                while [[ ! -e "/sys/bus/pci/devices/${dev}" ]]; do sleep 0.1; done
                
                echo "[INFO] ----> Verifying device is no longer attached to vfio-pci stub driver"
                if [[ -e "/sys/bus/pci/drivers/vfio-pci/${dev}" ]]; then
                    echo "[ERROR] ----> DEVICE IS STILL ATTACHED TO VFIO-PCI"
                    echo "Run $0 restore-devices again"
                fi
            else
                echo "[INFO] -> Device ${dev} is not attached to vfio-pci"
            fi
        done
        ;&

    restore-services)
        echo "[INFO] Restoring services and drivers"
        
        for i in ${START_SERVICES}; do
            echo "[INFO] -> Stopping service ${i}"
            systemctl is-active --quiet ${i} && systemctl stop ${i}
        done

        for i in ${START_MODULES}; do
            echo "[INFO] -> Unloading kernel module ${i}"
            ! modprobe -r ${i} 2>/dev/null
        done

        for i in ${BLACKLISTED_SERVICES}; do
            echo "[INFO] -> Starting service ${i}"
            ! systemctl start ${i}
        done

        for i in ${BLACKLISTED_MODULES}; do
            echo "[INFO] -> Trying to load kernel module ${i}"
            ! modprobe ${i}
        done

        sleep 0.25
        ;&

    restore-services)
        echo "[INFO] Done!"
        ;&
esac

